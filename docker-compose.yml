version: "3.7"

services:

  web:
    build: "./app"
    image: django_app
    container_name: django_app
    hostname: django
    restart: "always"
    expose:
      - "8000"
    volumes:
      - ./volumes/app:/home/appuser/app
      - ./volumes/log:/home/appuser/log
    networks:
      - monitoring_network
      - postgres_network
      - minio_network
      - redis_network
    env_file:
      - "./.env"
    depends_on:
      - "redis"
      - "postgres"
      - "minio"
      - "grafana"
    security_opt:
      - no-new-privileges:true

  postgres:
    image: postgres:alpine
    container_name: django_postgres
    hostname: postgres
    command: -p ${DB_PORT}
    expose:
      - ${DB_PORT}
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /var/lib/postgresql/data/pgdata
    networks:
      - postgres_network
    volumes:
      - ./volumes/db/data:/var/lib/postgresql/data 
      - ./volumes/db/initdb:/docker-entrypoint-initdb.d
    security_opt:
      - no-new-privileges:true

  minio: 
    image: quay.io/minio/minio
    container_name: django_minio
    hostname: minio
    command: server --console-address ":9001" /data
    expose:
      - "9000"
    restart: always
    ports:
      - 9001:9001
    networks:
      - minio_network
    environment:
      - MINIO_ROOT_USER=${DJANGO_MINIO_STORAGE_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${DJANGO_MINIO_STORAGE_SECRET_KEY}
      - MINIO_PROMETHEUS_AUTH_TYPE=public
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    security_opt:
      - no-new-privileges:true

  redis:
    image: redis:alpine
    container_name: django_redis
    hostname: redis
    command: redis-server --requirepass ${REDIS_PASS} --port ${REDIS_PORT}
    expose:
      - ${REDIS_PORT}
    restart: always
    volumes: 
      - redis_data:/data
    networks:
      - redis_network
    security_opt:
      - no-new-privileges:true

  nginx:
    image: owasp/modsecurity-crs:nginx-alpine
    container_name: django_nginx
    hostname: nginx
    restart: "always"
    ports:
      - ${NGINX_PORT}:80
    networks:
      - minio_network
    depends_on:
      - "web"
    volumes:
      - ./volumes/log:/var/log/nginx
      - ./volumes/nginx/default.conf:/etc/nginx/templates/conf.d/default.conf.template
    security_opt:
      - no-new-privileges:true

  prometheus:
    image: prom/prometheus
    container_name: django_prometheus
    hostname: prometheus
    volumes:
      - ./volumes/prometheus_etc:/etc/prometheus
      - ./volumes/prometheus_usr:/usr/share/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: always
    expose:
      - "9090"
    networks:
      - minio_network
      - monitoring_network
    labels:
      org.label-schema.group: "monitoring"

  alertmanager:
    image: prom/alertmanager
    container_name: django_alertmanager
    hostname: alertmanager
    volumes:
      - ./volumes/alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: always
    expose:
      - "9093"
    networks:
      - monitoring_network
    depends_on:
      - prometheus
    labels:
      org.label-schema.group: "monitoring"

  grafana:
    image: grafana/grafana
    container_name: django_grafana
    hostname: grafana
    user: "472"
    volumes:
      - ./volumes/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:${DB_PORT}
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=${DB_USER}
      - GF_DATABASE_PASSWORD=${DB_PASS}
      - GF_DATABASE_SSL_MODE=disable
      - GF_SECURITY_ADMIN_USER=${GRAFANA_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: always
    ports:
      - 3000:3000
    networks:
      - postgres_network
      - monitoring_network
    depends_on:
      - postgres
      - prometheus
    labels:
      org.label-schema.group: "monitoring"

volumes:
    prometheus_data: 
    grafana_data: 
    redis_data:

networks:
  postgres_network:
  minio_network:
  redis_network:
  monitoring_network: